// server.mjs ‚Äî Telegram –±–æ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è c –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º –¥–∞—Ç (Admin API Key)

import 'dotenv/config';
import express from 'express';
import { Telegraf, Markup } from 'telegraf';
import { createClient, ApiKeyStrategy } from '@wix/sdk';
import { services as servicesApi, bookings as bookingsApi } from '@wix/bookings';

// ================== ENV sanity ==================
const REQ_ENV = ['BOT_TOKEN', 'ADMIN_API_KEY', 'SITE_ID', 'PUBLIC_URL'];
REQ_ENV.forEach(k => { if (!process.env[k]) console.error(`ENV ${k} is missing`); });

const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_API_KEY = process.env.ADMIN_API_KEY;
const SITE_ID = process.env.SITE_ID;
const PUBLIC_URL = process.env.PUBLIC_URL;

const app = express();
app.use(express.json());

// ================== Wix client (Admin API Key) ==================
const wix = createClient({
  modules: { services: servicesApi, bookings: bookingsApi },
  auth: ApiKeyStrategy({ siteId: SITE_ID, apiKey: ADMIN_API_KEY }),
});

// ================== REST helpers (services/availability) ==================
const baseHeaders = {
  'Content-Type': 'application/json',
  Authorization: ADMIN_API_KEY,
  'wix-site-id': SITE_ID,
};

async function restQueryServices() {
  const r = await fetch('https://www.wixapis.com/bookings/v1/services/query', {
    method: 'POST', headers: baseHeaders, body: JSON.stringify({ query: {} }),
  });
  if (!r.ok) throw new Error(`services ${r.status}: ${await r.text()}`);
  return r.json(); // { services: [...] }
}

async function restQueryAvailability({ serviceId, from, to }) {
  const r = await fetch('https://www.wixapis.com/bookings/v1/availability/query', {
    method: 'POST', headers: baseHeaders,
    body: JSON.stringify({ query: { serviceId, from, to } }),
  });
  if (!r.ok) throw new Error(`availability ${r.status}: ${await r.text()}`);
  return r.json(); // { slots: [...] } (–∏–ª–∏ availability.slots)
}

// –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –≥–µ—Ç—Ç–µ—Ä —É—Å–ª—É–≥ (–Ω–∞ –±—É–¥—É—â–µ–µ ‚Äî –µ—Å–ª–∏ –∫ SDK –≤–µ—Ä–Ω—ë–º—Å—è)
async function getServices() {
  try {
    // –ø–æ–ø—Ä–æ–±—É–µ–º SDK
    const resp = await wix.services.queryServices().find();
    return resp?.items ?? [];
  } catch (_) {
    // fallback REST
    const j = await restQueryServices();
    return j?.services ?? j?.items ?? [];
  }
}

// ================== –î–ê–¢–´/–§–û–†–ú–ê–¢–´ ==================
const RU_DAYS = ['–ù–¥', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
const UA_MONTHS_SHORT = ['—Å—ñ—á', '–ª—é—Ç', '–±–µ—Ä', '–∫–≤—ñ—Ç', '—Ç—Ä–∞–≤', '—á–µ—Ä–≤', '–ª–∏–ø', '—Å–µ—Ä', '–≤–µ—Ä', '–∂–æ–≤—Ç', '–ª–∏—Å', '–≥—Ä—É–¥'];

function pad2(n) { return n.toString().padStart(2, '0'); }

function toYMD(d) {
  // YYYY-MM-DD
  return `${d.getUTCFullYear()}-${pad2(d.getUTCMonth() + 1)}-${pad2(d.getUTCDate())}`;
}

function dayLabel(d, todayYMD) {
  const ymd = toYMD(d);
  if (ymd === todayYMD) return '–°—å–æ–≥–æ–¥–Ω—ñ';
  const wd = RU_DAYS[d.getUTCDay()];
  const lab = `${wd} ${d.getUTCDate()} ${UA_MONTHS_SHORT[d.getUTCMonth()]}`;
  return lab;
}

function startOfUTC(ymd) { return new Date(`${ymd}T00:00:00.000Z`); }
function endOfUTC(ymd)   { return new Date(`${ymd}T23:59:59.999Z`); }

// ================== Telegram bot ==================
const bot = new Telegraf(BOT_TOKEN);

// –ø—Ä–æ—Å—Ç–µ–π—à–∏–µ "—Å–µ—Å—Å–∏–∏" –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
const sessions = new Map(); // key: userId => { serviceId, dateYMD, slotId, step, name, phone }

// /start
bot.start((ctx) =>
  ctx.reply('–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', Markup.keyboard([['üóÇ –ü–æ—Å–ª—É–≥–∏']]).resize())
);

// –ü–æ—Å–ª—É–≥–∏ -> –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å —É—Å–ª—É–≥–∞–º–∏
bot.hears('üóÇ –ü–æ—Å–ª—É–≥–∏', async (ctx) => {
  try {
    const services = await getServices();
    if (!services.length) return ctx.reply('–ü–æ—Å–ª—É–≥ –ø–æ–∫–∏ –Ω–µ–º–∞—î.');

    const buttons = services.slice(0, 20).map(s => {
      const id = s._id || s.id;
      const name = s.info?.name || s.name || '–ë–µ–∑ –Ω–∞–∑–≤–∏';
      return [Markup.button.callback(name, `svc:${id}`)];
    });
    await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:', Markup.inlineKeyboard(buttons));
  } catch (e) {
    console.error('services error:', e?.response?.data || e?.message || e);
    ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª—É–≥.');
  }
});

// –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ 7 –¥–Ω–µ–π
bot.action(/^svc:(.+)$/, async (ctx) => {
  try {
    const serviceId = ctx.match[1];
    await ctx.answerCbQuery();

    const today = new Date(); // UTC –æ–∫, —Ç.–∫. –∫ Wix —à–ª—ë–º ISO
    const todayYMD = toYMD(today);

    const days = [...Array(7)].map((_, i) => {
      const d = new Date(Date.UTC(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate() + i));
      const ymd = toYMD(d);
      return { ymd, label: dayLabel(d, todayYMD) };
    });

    // –¥–µ–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 2 –∫–æ–ª–æ–Ω–∫–∏
    const rows = [];
    for (let i = 0; i < days.length; i += 2) {
      const row = [];
      for (let j = i; j < Math.min(i + 2, days.length); j++) {
        row.push(Markup.button.callback(days[j].label, `day:${serviceId}:${days[j].ymd}`));
      }
      rows.push(row);
    }
    rows.push([Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –ø–æ—Å–ª—É–≥', 'back:services')]);

    await ctx.editMessageText('–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:', Markup.inlineKeyboard(rows));
  } catch (e) {
    console.error('svc action error:', e?.message || e);
    await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }
});

bot.action('back:services', async (ctx) => {
  // –∑–∞–º–µ–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
  return bot.hears.handlers.get('üóÇ –ü–æ—Å–ª—É–≥–∏')[0](ctx);
});

// –í—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å ‚Äî –≥—Ä—É–∑–∏–º —Å–ª–æ—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
bot.action(/^day:(.+):(\d{4}-\d{2}-\d{2})$/, async (ctx) => {
  try {
    const serviceId = ctx.match[1];
    const ymd = ctx.match[2];
    await ctx.answerCbQuery();

    const from = startOfUTC(ymd).toISOString();
    const to = endOfUTC(ymd).toISOString();

    const j = await restQueryAvailability({ serviceId, from, to });
    const slots = j?.slots || j?.availability?.slots || [];

    if (!slots.length) {
      return ctx.editMessageText('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –Ω–∞ —Ü—é –¥–∞—Ç—É.', Markup.inlineKeyboard([
        [Markup.button.callback('‚¨ÖÔ∏è –î–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è', `svc:${serviceId}`)],
      ]));
    }

    const btns = slots.slice(0, 12).map(s => {
      const start = (s.startTime || s.slot?.startTime || '').slice(11, 16);
      const end   = (s.endTime   || s.slot?.endTime   || '').slice(11, 16);
      const slotId = s.slot?.id || s.id || s.slotId;
      return [Markup.button.callback(`${start} ‚Üí ${end}`, `pick:${serviceId}:${ymd}:${slotId}`)];
    });

    btns.push([Markup.button.callback('‚¨ÖÔ∏è –î–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è', `svc:${serviceId}`)]);
    await ctx.editMessageText(`–î–∞—Ç–∞: ${ymd}\n–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:`, Markup.inlineKeyboard(btns));
  } catch (e) {
    console.error('day action error:', e?.message || e);
    await ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ª–æ—Ç–∏ –Ω–∞ –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É.');
  }
});

// –í—ã–±—Ä–∞–ª–∏ —Å–ª–æ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –∏–º—è, –ø–æ—Ç–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–æ—Ç–æ–º —Å–æ–∑–¥–∞—ë–º –±—Ä–æ–Ω—å
bot.action(/^pick:(.+):(\d{4}-\d{2}-\d{2}):(.+)$/, async (ctx) => {
  try {
    const [_, serviceId, ymd, slotId] = ctx.match;
    await ctx.answerCbQuery();
    sessions.set(ctx.from.id, { serviceId, dateYMD: ymd, slotId, step: 'name' });
    await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º º—è:');
  } catch (e) {
    console.error('pick action error:', e);
    await ctx.reply('–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É —Å–ª–æ—Ç—É.');
  }
});

bot.on('text', async (ctx) => {
  const s = sessions.get(ctx.from.id);
  if (!s?.step) return;

  try {
    if (s.step === 'name') {
      s.name = ctx.message.text.trim();
      s.step = 'phone';
      return ctx.reply('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380...');
    }

    if (s.step === 'phone') {
      const phone = ctx.message.text.trim();
      if (!/^\+?\d{10,15}$/.test(phone)) {
        return ctx.reply('–¢–µ–ª–µ—Ñ–æ–Ω –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX (10‚Äì15 —Ü–∏—Ñ—Ä).');
      }
      s.phone = phone;

      // —Å–æ–∑–¥–∞—ë–º –±—Ä–æ–Ω—å (SDK)
      const r = await wix.bookings.createBooking({
        booking: {
          slot: { slotId: s.slotId, serviceId: s.serviceId },
          contactDetails: { fullName: s.name || ctx.from.first_name || 'Guest', phone: s.phone },
          participants: 1,
        },
      });

      const id = r?.booking?._id || r?.booking?.id || '‚Äî';
      sessions.delete(ctx.from.id);
      return ctx.reply(`‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!\nID: ${id}\n–î–∞—Ç–∞: ${s.dateYMD}`);
    }
  } catch (e) {
    console.error('booking error:', e?.response?.data || e);
    sessions.delete(ctx.from.id);
    return ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±—Ä–æ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Å–ª–æ—Ç.');
  }
});

// ================== HTTP (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞) ==================
app.get('/', (_, res) => res.send('ok ‚Äî /health, /debug/services, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –±–æ—Ç–∞ —É Telegram'));
app.get('/health', (_, res) => res.send('ok'));
app.get('/debug/services', async (_, res) => {
  try {
    const items = await getServices();
    res.json({ ok: true, count: items.length, items });
  } catch (e) {
    res.status(500).json({ ok: false, error: e?.response?.data || e?.message || e });
  }
});

app.use(bot.webhookCallback(`/tg/${BOT_TOKEN}`));

// ================== START ==================
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  try {
    const url = `${PUBLIC_URL}/tg/${BOT_TOKEN}`;
    await bot.telegram.setWebhook(url);
    console.log('Webhook set to', url);
  } catch (e) {
    console.error('Webhook set error:', e?.response?.data || e);
  }
  console.log('Server listening on', PORT);
});
