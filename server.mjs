import express from 'express';
import fetch from 'node-fetch';
import { Telegraf, Markup, session } from 'telegraf';

// ==== ENV ====
const {
  BOT_TOKEN,
  CLIENT_ID,
  CLIENT_SECRET,
  WIX_REFRESH_TOKEN,
  PUBLIC_URL,
  PORT = 3000,
} = process.env;

if (!BOT_TOKEN || !CLIENT_ID || !CLIENT_SECRET || !WIX_REFRESH_TOKEN || !PUBLIC_URL) {
  console.error('Missing required env vars. Need BOT_TOKEN, CLIENT_ID, CLIENT_SECRET, WIX_REFRESH_TOKEN, PUBLIC_URL');
  process.exit(1);
}

// ==== TELEGRAM ====
const bot = new Telegraf(BOT_TOKEN);
bot.use(session());

// –ù–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
const mainMenu = Markup.keyboard([
  [Markup.button.text('üì¶ –ü–æ—Å–ª—É–≥–∏'), Markup.button.text('üóìÔ∏è –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏')],
]).resize();

// ==== Wix Admin OAuth (client-credentials via refresh token) ====
let _cachedAccessToken = null;
let _tokenExp = 0;

async function getAccessToken() {
  const now = Date.now();
  if (_cachedAccessToken && now < _tokenExp - 30_000) return _cachedAccessToken;

  const url = 'https://www.wixapis.com/oauth/access';
  const res = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json', 'Authorization': `Basic ${Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString('base64')}` },
    body: JSON.stringify({ grant_type: 'refresh_token', refresh_token: WIX_REFRESH_TOKEN })
  });
  if (!res.ok) {
    const t = await res.text();
    throw new Error(`OAuth ${res.status}: ${t}`);
  }
  const json = await res.json();
  _cachedAccessToken = json.access_token;
  _tokenExp = Date.now() + (json.expires_in * 1000);
  return _cachedAccessToken;
}

async function wixFetch(path, body) {
  const token = await getAccessToken();
  const res = await fetch(`https://www.wixapis.com${path}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': token,
      'wix-site-id': '', // –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è Admin API
    },
    body: JSON.stringify(body)
  });
  const text = await res.text();
  let json;
  try { json = JSON.parse(text); } catch { json = { raw: text }; }
  if (!res.ok) throw new Error(`${path} ${res.status}: ${text}`);
  return json;
}

// ==== Bookings helpers ====
// –ù–∞—à–∏ 2 —É—Å–ª—É–≥–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ ‚Üí id). –ú–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å id –Ω–∞ —Å–≤–æ–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏.
const SERVICES = [
  { id: 'f34a76af-3072-44ca-b217-bb570e5cf297', title: '–†–∏–±–æ–ª–æ–≤–ª—è "–î–æ–±–∞"' },      // Full day
  { id: '7fab746c-0926-4157-be80-5ec252f58b11', title: '–†–∏–±–æ–ª–æ–≤–ª—è "–ü—ñ–≤ –¥–æ–±–∏"' }, // Half day
];

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (availability v2) –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ —Å–µ–∫—Ç–æ—Ä—É
async function queryAvailability({ serviceId, startISO, endISO, tz = 'Europe/Kiev', resourceIds = [] }) {
  const body = {
    query: {
      filter: {
        serviceId,
        timeZone: tz,
        startDate: startISO,
        endDate: endISO,
        capacity: { min: 1 }, // –º–∏–Ω–∏–º—É–º 1 –º–µ—Å—Ç–æ
      }
    }
  };
  if (resourceIds.length) {
    body.query.filter.resource = { ids: resourceIds };
  }
  return wixFetch('/bookings/v1/availability/query', body);
}

// –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ ¬´—Å–µ–∫—Ç–æ—Ä–æ–≤¬ª (resourceId ‚Üí name) –∏–∑ –±–ª–∏–∂–∞–π—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞ 30 –¥–Ω–µ–π
async function collectSectorsFromAvailability(serviceId) {
  const start = new Date();
  const end = new Date();
  end.setDate(end.getDate() + 30);

  const tz = 'Europe/Kiev';
  const startISO = start.toISOString();
  const endISO = end.toISOString();

  const avail = await queryAvailability({ serviceId, startISO, endISO, tz });
  const map = new Map();
  const entries = avail.availabilityEntries || [];
  for (const e of entries) {
    const r = e.slot?.resource;
    if (r?.id && r?.name) map.set(r.id, r.name);
  }
  return Array.from(map, ([id, name]) => ({ id, name })).sort((a,b) => a.name.localeCompare(b.name, 'uk'));
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–ª–æ—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –∏ —Å–µ–∫—Ç–æ—Ä–∞
async function daySlots({ serviceId, sectorId, dateStr, tz='Europe/Kiev' }) {
  const day = new Date(`${dateStr}T00:00:00`);
  const startISO = new Date(day.getTime() - day.getTimezoneOffset()*60000).toISOString(); // UTC –Ω–∞—á–∞–ª–∞ –¥–Ω—è
  const endISO = new Date(day.getTime() + (24*60*60*1000) - day.getTimezoneOffset()*60000).toISOString();

  const avail = await queryAvailability({ serviceId, startISO, endISO, tz, resourceIds: [sectorId] });
  const entries = avail.availabilityEntries || [];
  // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–ª–æ—Ç—ã
  const open = entries.filter(e => e.bookable && (e.openSpots ?? 0) > 0);
  // –í–µ—Ä–Ω—ë–º –≤—Ä–µ–º–µ–Ω–∞ —Å—Ç–∞—Ä—Ç–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–µ)
  const times = open.map(e => {
    const startZ = e.slot?.startDate;
    const d = startZ ? new Date(startZ) : null;
    if (!d) return null;
    const hh = `${d.getHours()}`.padStart(2,'0');
    const mm = `${d.getMinutes()}`.padStart(2,'0');
    return `${hh}:${mm}`;
  }).filter(Boolean);

  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
  return Array.from(new Set(times)).sort((a,b)=>a.localeCompare(b));
}

// ==== –¢–ì —Å—Ü–µ–Ω–∞—Ä–∏–π –±—Ä–æ–Ω–∏ (–ø—Ä–æ—Å—Ç–∞—è FSM –≤ session) ====
const FLOW = {
  IDLE: 'IDLE',
  PICK_SERVICE: 'PICK_SERVICE',
  PICK_SECTOR: 'PICK_SECTOR',
  PICK_DATE: 'PICK_DATE',
  SHOW_TIMES: 'SHOW_TIMES',
};

function resetFlow(ctx) {
  ctx.session.flow = {
    step: FLOW.IDLE,
    serviceId: null,
    serviceTitle: null,
    sectorId: null,
    sectorName: null,
    date: null,
  };
}

bot.start(async (ctx) => {
  resetFlow(ctx);
  await ctx.reply('–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', mainMenu);
});

bot.hears('üì¶ –ü–æ—Å–ª—É–≥–∏', async (ctx) => {
  // –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
  const list = SERVICES.map(s => `‚Ä¢ ${s.title} ‚Äî ${s.id}`).join('\n');
  await ctx.reply(`–î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ—Å–ª—É–≥–∏:\n${list}\n\n–ù–∞–¥—ñ—à–ª–∏ /slots <SERVICE_ID> <YYYY-MM-DD> —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ª–æ—Ç–∏ –Ω–∞ –¥–∞—Ç—É.`, mainMenu);
});

bot.hears('üóìÔ∏è –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏', async (ctx) => {
  resetFlow(ctx);
  ctx.session.flow.step = FLOW.PICK_SERVICE;

  await ctx.reply(
    '–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ—Å–ª—É–≥–∏:',
    Markup.inlineKeyboard(
      SERVICES.map(s => [Markup.button.callback(s.title, `srv:${s.id}`)])
    )
  );
});

// –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
bot.action(/srv:(.+)/, async (ctx) => {
  if (!ctx.session.flow || ctx.session.flow.step !== FLOW.PICK_SERVICE) return;
  const serviceId = ctx.match[1];
  const srv = SERVICES.find(s => s.id === serviceId);
  ctx.session.flow.serviceId = serviceId;
  ctx.session.flow.serviceTitle = srv?.title || '–ü–æ—Å–ª—É–≥–∞';
  ctx.session.flow.step = FLOW.PICK_SECTOR;

  await ctx.answerCbQuery();
  await ctx.editMessageText(`–ü–æ—Å–ª—É–≥–∞: ${ctx.session.flow.serviceTitle}\n–®—É–∫–∞—é –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–µ–∫—Ç–æ—Ä–∏‚Ä¶`);

  try {
    const sectors = await collectSectorsFromAvailability(serviceId);
    if (!sectors.length) {
      await ctx.reply('–ù–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ 30 –¥–Ω—ñ–≤ –≤—ñ–ª—å–Ω–∏—Ö —Å–µ–∫—Ç–æ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –¥–∞—Ç—É/–ø–æ—Å–ª—É–≥—É.', mainMenu);
      resetFlow(ctx);
      return;
    }
    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    const rows = [];
    for (let i = 0; i < sectors.length; i += 3) {
      rows.push(sectors.slice(i, i+3).map(s => Markup.button.callback(s.name, `sec:${s.id}:${encodeURIComponent(s.name)}`)));
    }
    await ctx.reply('–û–±–µ—Ä—ñ—Ç—å —Å–µ–∫—Ç–æ—Ä:', Markup.inlineKeyboard(rows));
  } catch (e) {
    console.error('collectSectors error', e);
    await ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ–∫—Ç–æ—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', mainMenu);
    resetFlow(ctx);
  }
});

// –í—ã–±–æ—Ä —Å–µ–∫—Ç–æ—Ä–∞
bot.action(/sec:([^:]+):(.+)/, async (ctx) => {
  if (!ctx.session.flow || ctx.session.flow.step !== FLOW.PICK_SECTOR) return;
  const sectorId = ctx.match[1];
  const sectorName = decodeURIComponent(ctx.match[2]);

  ctx.session.flow.sectorId = sectorId;
  ctx.session.flow.sectorName = sectorName;
  ctx.session.flow.step = FLOW.PICK_DATE;

  await ctx.answerCbQuery();
  await ctx.reply(
    `–°–µ–∫—Ç–æ—Ä: ${sectorName}\n–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–î–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è¬ª.`,
    Markup.keyboard([[Markup.button.text('üìÖ –î–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è')]]).oneTime().resize()
  );
});

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ¬´–î–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞
bot.hears('üìÖ –î–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è', async (ctx) => {
  if (!ctx.session.flow || ctx.session.flow.step !== FLOW.PICK_DATE) return;
  await ctx.reply('–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–∞—Ç—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2025-08-15');
});

// –í–≤–æ–¥ –¥–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º
bot.on('text', async (ctx) => {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ –º—ã –≤ —à–∞–≥–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
  if (!ctx.session.flow || ctx.session.flow.step !== FLOW.PICK_DATE) {
    return; // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–∏—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  }
  const txt = (ctx.message.text || '').trim();
  // –ü—Ä–æ—Å—Ç–æ–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∞—Ç—ã
  if (!/^\d{4}-\d{2}-\d{2}$/.test(txt)) {
    await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2025-08-15');
    return;
  }

  ctx.session.flow.date = txt;
  ctx.session.flow.step = FLOW.SHOW_TIMES;

  const { serviceId, sectorId, sectorName } = ctx.session.flow;
  await ctx.reply(`–®—É–∫–∞—é –≤—ñ–ª—å–Ω—ñ —á–∞—Å–∏ —Å—Ç–∞—Ä—Ç—É –¥–ª—è ${sectorName} –Ω–∞ ${txt}‚Ä¶`);

  try {
    const times = await daySlots({ serviceId, sectorId, dateStr: txt });
    if (!times.length) {
      await ctx.reply('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –Ω–∞ —Ü—é –¥–∞—Ç—É. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É –∞–±–æ —Å–µ–∫—Ç–æ—Ä.', mainMenu);
      resetFlow(ctx);
      return;
    }

    // –ö–Ω–æ–ø–∫–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–∞–º–∏ (–ø–æ 4 –≤ —Ä—è–¥)
    const rows = [];
    for (let i = 0; i < times.length; i += 4) {
      rows.push(times.slice(i, i+4).map(t => Markup.button.callback(t, `tm:${t}`)));
    }
    await ctx.reply('–î–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Å–∏ –ø–æ—á–∞—Ç–∫—É:', Markup.inlineKeyboard(rows));
  } catch (e) {
    console.error('daySlots error', e);
    await ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ª–æ—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', mainMenu);
    resetFlow(ctx);
  }
});

// –ö–ª–∏–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä
bot.action(/tm:(.+)/, async (ctx) => {
  if (!ctx.session.flow || ctx.session.flow.step !== FLOW.SHOW_TIMES) return;
  const time = ctx.match[1];
  const { serviceTitle, sectorName, date } = ctx.session.flow;

  await ctx.answerCbQuery();
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å: –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç/—ñ–º‚Äô—è, —Å—Ç–≤–æ—Ä–∏—Ç–∏ booking —á–µ—Ä–µ–∑ Admin API.
  await ctx.reply(
    `–û–±—Ä–∞–Ω–æ:\n‚Ä¢ –ü–æ—Å–ª—É–≥–∞: ${serviceTitle}\n‚Ä¢ –°–µ–∫—Ç–æ—Ä: ${sectorName}\n‚Ä¢ –î–∞—Ç–∞: ${date}\n‚Ä¢ –ß–∞—Å —Å—Ç–∞—Ä—Ç—É: ${time}\n\n(–î–∞–ª—ñ ‚Äî –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –¥–æ–¥–∞–º–æ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏)`,
    mainMenu
  );
  resetFlow(ctx);
});

// ==== –ö–æ–º–∞–Ω–¥–∞ /slots (—Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞) ====
bot.command('slots', async (ctx) => {
  const parts = ctx.message.text.split(/\s+/);
  // /slots <serviceId> [yyyy-mm-dd]
  const serviceId = parts[1];
  const date = parts[2] || new Date().toISOString().slice(0,10);

  if (!serviceId) {
    await ctx.reply('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /slots <SERVICE_ID> [YYYY-MM-DD]');
    return;
  }
  try {
    // —Å–æ–±–µ—Ä—ë–º –≤—Å–µ —Å–µ–∫—Ç–æ—Ä—ã –∏–∑ –±–ª–∏–∂–∞–π—à–∏—Ö 30 –¥–Ω—ñ–≤, —ñ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏ –ø–æ–∫–∞–∂–µ–º–æ, –¥–µ —î —Ö–æ—á –æ–¥–∏–Ω —Å–ª–æ—Ç
    const sectors = await collectSectorsFromAvailability(serviceId);
    if (!sectors.length) {
      await ctx.reply('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–µ–∫—Ç–æ—Ä—ñ–≤ –≤ –Ω–∞–π–±–ª–∏–∂—á—ñ 30 –¥–Ω—ñ–≤.');
      return;
    }

    const findings = [];
    for (const s of sectors) {
      const times = await daySlots({ serviceId, sectorId: s.id, dateStr: date });
      if (times.length) findings.push(`‚Ä¢ ${s.name}: ${times.slice(0,8).join(', ')}${times.length>8?'‚Ä¶':''}`);
    }
    if (!findings.length) {
      await ctx.reply(`–ù–µ–º–∞—î —Å–ª–æ—Ç—ñ–≤ –Ω–∞ ${date}.`);
      return;
    }
    await ctx.reply(`–í—ñ–ª—å–Ω—ñ –Ω–∞ ${date}:\n${findings.join('\n')}`);
  } catch (e) {
    console.error('/slots error', e);
    await ctx.reply('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ª–æ—Ç—ñ–≤.');
  }
});

// ==== EXPRESS + WEBHOOK ====
const app = express();
app.use(express.json());

// health
app.get('/', (_req, res) => res.send('OK'));

// debug endpoint: /debug/availability?serviceId=...&ymd=YYYY-MM-DD
app.get('/debug/availability', async (req, res) => {
  try {
    const { serviceId, ymd, tz = 'Europe/Kiev', resourceId } = req.query;
    if (!serviceId || !ymd) return res.json({ ok: false, error: 'need serviceId & ymd' });

    const startISO = new Date(`${ymd}T00:00:00Z`).toISOString();
    const endISO = new Date(`${ymd}T23:59:59Z`).toISOString();
    const resourceIds = resourceId ? [String(resourceId)] : [];

    const data = await queryAvailability({ serviceId, startISO, endISO, tz, resourceIds });
    res.json({ ok: true, timezone: tz, start: startISO, end: endISO, raw: data });
  } catch (e) {
    res.status(500).json({ ok: false, error: String(e) });
  }
});

// Telegram webhook
app.use(bot.webhookCallback('/tg/webhook'));
await bot.telegram.setWebhook(`${PUBLIC_URL}/tg/webhook`);

app.listen(PORT, () => {
  console.log('Server listening on', PORT);
  console.log('==> Your service is live üéâ');
  console.log(`==> Available at your primary URL ${PUBLIC_URL}`);
  console.log('==> ///////////////////////////////////////////////////////////////');
});
