import 'dotenv/config';
import express from 'express';
import { Telegraf, Markup } from 'telegraf';
import { createClient, OAuthStrategy } from '@wix/sdk';
import { bookings } from '@wix/bookings';

const app = express();
app.use(express.json());

// ---- Wix SDK (OAuth: client_credentials) ----
const wix = createClient({
  modules: { bookings },
  auth: OAuthStrategy({
    clientId: process.env.CLIENT_ID,
    clientSecret: process.env.CLIENT_SECRET, // –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è server-to-server
  }),
});

// ---- Telegram Bot ----
const bot = new Telegraf(process.env.BOT_TOKEN);

// /start
bot.start((ctx) =>
  ctx.reply(
    '–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:',
    Markup.keyboard([['üóÇ –ü–æ—Å–ª—É–≥–∏', 'üóì –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏']]).resize()
  )
);

// —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
bot.hears('üóÇ –ü–æ—Å–ª—É–≥–∏', async (ctx) => {
  try {
    const resp = await wix.bookings.services.queryServices().find();
    if (!resp.items.length) return ctx.reply('–ü–æ—Å–ª—É–≥ –ø–æ–∫–∏ –Ω–µ–º–∞—î.');
    const rows = resp.items.map(s => `‚Ä¢ ${s.info?.name} ‚Äî ${s._id}`).join('\n');
    ctx.reply(`–î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ—Å–ª—É–≥–∏:\n${rows}\n\n–ù–∞–¥—ñ—à–ª–∏ /slots <SERVICE_ID> —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.`);
  } catch (e) {
    console.error('services error:', e?.response?.data || e);
    ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª—É–≥.');
  }
});

// —Å–ª–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: /slots <SERVICE_ID>
bot.command('slots', async (ctx) => {
  try {
    const [, serviceId] = ctx.message.text.split(' ').map(s => s.trim());
    if (!serviceId) return ctx.reply('–ù–∞–¥—ñ—à–ª–∏: /slots <SERVICE_ID>');

    const from = new Date();
    const to = new Date(Date.now() + 24*60*60*1000);
    const resp = await wix.bookings.availability.queryAvailability({
      query: { serviceId, from: from.toISOString(), to: to.toISOString() }
    });

    const slots = resp?.slots || [];
    if (!slots.length) return ctx.reply('–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –Ω–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.');

    // –ø–µ—Ä–≤—ã–µ 6 —Å–ª–æ—Ç–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏
    const btns = slots.slice(0, 6).map(s => {
      const label = s.startTime.slice(11,16) + ' ‚Üí ' + s.endTime.slice(11,16);
      return [Markup.button.callback(label, `pick:${serviceId}:${s.slot.id}`)];
    });
    ctx.reply('–û–±–µ—Ä—ñ—Ç—å —Å–ª–æ—Ç:', Markup.inlineKeyboard(btns));
  } catch (e) {
    console.error('availability error:', e?.response?.data || e);
    ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ª–æ—Ç–∏.');
  }
});

// –≤—ã–±–æ—Ä —Å–ª–æ—Ç–∞ -> –ø—Ä–æ—Å–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω -> —Å–æ–∑–¥–∞—ë–º –±—Ä–æ–Ω—å
const sessions = new Map(); // –ø—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ (–¥–ª—è –ø—Ä–æ–¥ ‚Äî –ª—É—á—à–µ Redis)

bot.action(/pick:(.+):(.+)/, async (ctx) => {
  const [, serviceId, slotId] = ctx.match;
  await ctx.answerCbQuery();
  sessions.set(ctx.from.id, { serviceId, slotId });
  return ctx.reply('–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380...');
});

bot.on('text', async (ctx) => {
  const s = sessions.get(ctx.from.id);
  if (!s?.slotId) return; // –Ω–µ –∂–¥—ë–º —Ç–µ–ª–µ—Ñ–æ–Ω ‚Äî –∏–≥–Ω–æ—Ä

  const phone = ctx.message.text.trim();
  if (!/^\+?\d{10,15}$/.test(phone)) return ctx.reply('–°—Ö–æ–∂–µ, —Ü–µ –Ω–µ –Ω–æ–º–µ—Ä. –ù–∞–¥—ñ—à–ª–∏ –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380...');

  try {
    const r = await wix.bookings.bookings.createBooking({
      booking: {
        slot: { slotId: s.slotId, serviceId: s.serviceId },
        contactDetails: { fullName: ctx.from.first_name || 'Guest', phone },
        participants: 1
      }
    });
    const id = r?.booking?._id || r?.booking?.id;
    sessions.delete(ctx.from.id);
    return ctx.reply(`‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ! ID: ${id}\n(–û–ø–ª–∞—Ç—É –¥–æ–¥–∞–º–æ –æ–∫—Ä–µ–º–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º)`);
  } catch (e) {
    console.error('book error:', e?.response?.data || e);
    return ctx.reply('–ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±—Ä–æ–Ω—å. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π —Å–ª–æ—Ç.');
  }
});

// webhook (Render/Railway)
app.use(bot.webhookCallback(`/tg/${process.env.BOT_TOKEN}`));

// healthcheck
app.get('/health', (_, res) => res.send('ok'));

// graceful shutdown
function shutdown(sig) {
  console.log(`\n${sig} received, shutting down...`);
  process.exit(0);
}
['SIGINT','SIGTERM'].forEach(sig => process.on(sig, () => shutdown(sig)));

// –∑–∞–ø—É—Å–∫ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  try {
    const url = `${process.env.PUBLIC_URL}/tg/${process.env.BOT_TOKEN}`;
    await bot.telegram.setWebhook(url);
    console.log('Webhook set to', url);
  } catch (e) {
    console.error('Webhook set error:', e);
  }
  console.log('Server listening on', PORT);
});
