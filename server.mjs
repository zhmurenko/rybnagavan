// server.mjs
// Rybna Gavan ‚Äî –ø—Ä–∏–µ–º –≤–µ–±—Ö—É–∫–∞ –æ—Ç Wix + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–±–µ–∑ OAuth)

// ============== ENV ==============
import express from 'express';
import { Telegraf } from 'telegraf';

const {
  PORT = 3000,
  TIMEZONE = 'Europe/Kiev',
  BOT_TOKEN,          // —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
  ADMIN_CHAT_ID,      // —á–∞—Ç, –∫—É–¥–∞ —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  WEBHOOK_SECRET,     // –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
} = process.env;

if (!BOT_TOKEN) throw new Error('BOT_TOKEN is required');
if (!ADMIN_CHAT_ID) throw new Error('ADMIN_CHAT_ID is required');
if (!WEBHOOK_SECRET) console.warn('WEBHOOK_SECRET is not set (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å)');

const app = express();
app.use(express.json({ limit: '1mb' }));

// ============== Telegram ==============
const bot = new Telegraf(BOT_TOKEN);

function fmtLocal(iso) {
  if (!iso) return '‚Äî';
  const d = new Date(iso);
  return d.toLocaleString('uk-UA', {
    timeZone: TIMEZONE,
    year: 'numeric', month: '2-digit', day: '2-digit',
    hour: '2-digit', minute: '2-digit'
  });
}
const cleanPhone = (p='') => p.replace(/[^\d+]/g, '');

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
async function notifyAdmin(html) {
  await bot.telegram.sendMessage(ADMIN_CHAT_ID, html, {
    parse_mode: 'HTML',
    disable_web_page_preview: true
  });
}

// ============== Health/Root ==============
app.get('/', (_req, res) => {
  res.type('text').send('OK: webhook server (no OAuth)');
});
app.get('/health', (_req, res) => {
  res.json({
    ok: true,
    tz: TIMEZONE,
    has: { BOT_TOKEN: !!BOT_TOKEN, ADMIN_CHAT_ID: !!ADMIN_CHAT_ID, WEBHOOK_SECRET: !!WEBHOOK_SECRET },
    now: new Date().toISOString()
  });
});

// ============== Webhook –æ—Ç Wix ==============
// URL –¥–ª—è Wix-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: POST https://<—Ç–≤–æ–π_–¥–æ–º–µ–Ω>/hooks/booking-created
// –í –∑–∞–≥–æ–ª–æ–≤–∫–µ –¥–æ–±–∞–≤—å: X-Webhook-Secret: <—Ç–≤–æ–π —Å–µ–∫—Ä–µ—Ç –∏–∑ env WEBHOOK_SECRET>
// –¢–µ–ª–æ (JSON) –∑–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è–º–∏ –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä –Ω–∏–∂–µ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)
app.post('/hooks/booking-created', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–µ–∫—Ä–µ—Ç (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    if (WEBHOOK_SECRET) {
      const hdr = req.header('X-Webhook-Secret') || req.header('x-webhook-secret');
      if (hdr !== WEBHOOK_SECRET) {
        return res.status(401).json({ ok: false, error: 'bad signature' });
      }
    }

    const p = req.body || {};
    // –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è (—Å–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –º–∞–ø–ø–∏–Ω–≥—É)
    const serviceName   = p.serviceName || '–ü–æ—Å–ª—É–≥–∞';
    const sectorName    = p.sectorName  || (p.resourceName || '–°–µ–∫—Ç–æ—Ä');
    const startISO      = p.start       || p.startISO;
    const endISO        = p.end         || p.endISO;
    const amount        = p.amount ?? null;
    const currency      = p.currency || 'UAH';
    const customerName  = p.customerName || '‚Äî';
    const customerPhone = p.customerPhone || '‚Äî';
    const bookingId     = p.bookingId || p.id || '‚Äî';

    const priceTxt = amount != null
      ? `${new Intl.NumberFormat('uk-UA').format(amount)} ${currency}`
      : '‚Äî';

    const msg =
      `üÜï <b>–ù–æ–≤–∞ –±—Ä–æ–Ω—å</b>\n` +
      `‚Ä¢ –ü–æ—Å–ª—É–≥–∞: <b>${serviceName}</b>\n` +
      `‚Ä¢ –°–µ–∫—Ç–æ—Ä: <b>${sectorName}</b>\n` +
      `‚Ä¢ –î–∞—Ç–∞/—á–∞—Å: <b>${fmtLocal(startISO)}</b>${endISO ? ` ‚Üí <b>${fmtLocal(endISO)}</b>` : ''}\n` +
      `‚Ä¢ –î–æ –æ–ø–ª–∞—Ç–∏: <b>${priceTxt}</b>\n` +
      `‚Ä¢ –ö–ª—ñ—î–Ω—Ç: ${customerName}\n` +
      `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <a href="tel:${cleanPhone(customerPhone)}">${customerPhone}</a>\n` +
      `‚Ä¢ ID: <code>${bookingId}</code>`;

    await notifyAdmin(msg);
    return res.json({ ok: true });
  } catch (e) {
    console.error('webhook error', e);
    return res.status(500).json({ ok: false, error: String(e) });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–π–Ω—Ç ‚Äî –º–æ–∂–Ω–æ —Ä—É–∫–∞–º–∏ –¥–µ—Ä–Ω—É—Ç—å POST –∏–∑ Postman
app.post('/hooks/test', async (req, res) => {
  try {
    const p = req.body || {};
    await notifyAdmin(`<b>–¢–µ—Å—Ç</b>\n${JSON.stringify(p, null, 2)}`);
    res.json({ ok: true });
  } catch (e) {
    res.status(500).json({ ok: false, error: String(e) });
  }
});

// ============== Start ==============
app.listen(PORT, () => {
  console.log(`Webhook server on ${PORT} TZ=${TIMEZONE}`);
});
